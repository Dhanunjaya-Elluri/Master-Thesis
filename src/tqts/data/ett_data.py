#!/usr/bin/env python
# coding: utf-8

"""Data loader for ETT hourly dataset using the character sequence generated by KernelSAX."""

__author__ = "Dhanunjaya Elluri"
__mail__ = "dhanunjaya.elluri@tu-dortmund.de"

import os
from typing import List, Tuple, Optional

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from torch.utils.data import Dataset

from tqts.utils.time_feat import time_features


class ETTHDataset(Dataset):
    """Dataset class for handling quantized time series generated by KernelSAX.

    Args:
        root_path (str): Path to the root directory containing the dataset.
        flag (str): Dataset type ('train', 'test', or 'val').
        size (Tuple[int, int, int], optional): Tuple representing the sequence length, label length, and prediction length.
        features (str): Type of features ('S', 'M', or 'MS').
        data_path (str): Path to the CSV file.
        target (str): Name of the target variable in the dataset.
        scale (bool): Whether to scale the data using StandardScaler.
        time_enc (int): Time encoding flag (0 or 1).
        freq (str): Frequency of the time series data.
        train_only (bool): Flag to indicate training only mode.
        inverse (bool): Flag to indicate inverse scaling.
        cols (List[str]): List of columns to be used from the CSV file.
    """

    def __init__(
        self,
        root_path: str,
        flag: str = "train",
        size: Optional[Tuple[int, int, int]] = None,
        features: str = "S",
        data_path: str = "ETTh1_lloyd.csv",
        target: str = "encoded_alphabets",
        scale: bool = True,
        time_enc: int = 0,
        freq: str = "4h",
        train_only: bool = False,
        inverse: bool = False,
        cols: List[str] = None,
    ) -> None:
        # Initialize sequence, label, and prediction lengths
        self.freq = freq
        self.size = size

        if self.size is None:
            self.seq_len = 24 // 4 * 4 * 4  # // int(self.freq[0])
            self.label_len = 24 // 4 * 4
            self.pred_len = 24 // 4 * 4
        else:
            self.seq_len, self.label_len, self.pred_len = self.size

        assert flag in ["train", "test", "val"], "Invalid dataset type."
        type_map = {"train": 0, "val": 1, "test": 2}
        self.set_type = type_map[flag]

        self.root_path = root_path
        self.flag = flag
        self.features = features
        self.data_path = data_path
        self.target = target
        self.scale = scale
        self.time_enc = time_enc
        self.train_only = train_only
        self.inverse = inverse
        self.__read_data__()

    def __read_data__(self):
        self.scaler = StandardScaler()
        df_raw = pd.read_csv(os.path.join(self.root_path, self.data_path))

        # Adjust the borders based on the dataset size and frequency
        border1s = [
            0,
            12 * 30 * (24 // 4) - self.seq_len,
            12 * 30 * (24 // 4) + 4 * 30 * (24 // 4) - self.seq_len,
        ]
        border2s = [
            12 * 30 * (24 // 4),
            12 * 30 * (24 // 4) + 4 * 30 * (24 // 4),
            12 * 30 * (24 // 4) + 8 * 30 * (24 // 4),
        ]
        border1 = border1s[self.set_type]
        border2 = border2s[self.set_type]

        if self.features == "M" or self.features == "MS":
            # cols_data = df_raw.columns[1:]
            df_data = df_raw[[self.target]]  # df_raw[cols_data]
        elif self.features == "S":
            df_data = df_raw[[self.target]]

        if self.scale:
            train_data = df_data[border1s[0] : border2s[0]]
            self.scaler.fit(train_data.values)
            data = self.scaler.transform(df_data.values)
        else:
            data = df_data.values

        df_stamp = df_raw[["timestamp"]][border1:border2]
        df_stamp["timestamp"] = pd.to_datetime(df_stamp["timestamp"])
        data_stamp = time_features(df_stamp, timeenc=self.time_enc, freq=self.freq)

        self.data_x = data[border1:border2]
        if self.inverse:
            self.data_y = df_data.values[border1:border2]
        else:
            self.data_y = data[border1:border2]
        self.data_stamp = data_stamp

    def __getitem__(self, index):
        s_begin = index
        s_end = s_begin + self.seq_len
        r_begin = s_end - self.label_len
        r_end = r_begin + self.label_len + self.pred_len

        seq_x = self.data_x[s_begin:s_end]
        if self.inverse:
            seq_y = np.concatenate(
                [
                    self.data_x[r_begin : r_begin + self.label_len],
                    self.data_y[r_begin + self.label_len : r_end],
                ],
                0,
            )
        else:
            seq_y = self.data_y[r_begin:r_end]
        seq_x_mark = self.data_stamp[s_begin:s_end]
        seq_y_mark = self.data_stamp[r_begin:r_end]

        return seq_x, seq_y, seq_x_mark, seq_y_mark

    def __len__(self):
        return len(self.data_x) - self.seq_len - self.pred_len + 1

    def inverse_transform(self, data):
        return self.scaler.inverse_transform(data)


class ETTHPredDataset(Dataset):
    """A dataset class for the prediction phase of the Informer model.
    It reads a CSV file, extracts time features, and uses 'encoded_alphabets' as the target variable for predictions.

    Attributes:
        root_path: Path to the directory containing the CSV file.
        flag: Indicates the subset of the dataset (pred for prediction).
        size: A tuple of (sequence length, label length, prediction length).
        features: Type of features to use ('S' for single feature, 'M' for multiple features).
        data_path: Name of the CSV file.
        target: Name of the target variable.
        scale: Whether to scale the data using StandardScaler.
        inverse: Whether to perform inverse scaling on the data.
        time_enc: Time encoding (0 for no encoding, 1 for encoding).
        freq: Frequency of the data (e.g., 'h' for hourly).
        cols: Columns to be used from the CSV file.
    """

    def __init__(
        self,
        root_path: str,
        flag: str = "pred",
        size: Optional[List] = None,
        features: str = "S",
        data_path: str = "ETTh1_lloyd.csv",
        target: str = "encoded_alphabets",
        scale: bool = True,
        inverse: bool = False,
        time_enc: int = 0,
        freq: str = "4h",
        cols: List[str] = None,
    ):
        # size [seq_len, label_len, pred_len]
        if size is None:
            self.seq_len = 24 // int(freq[0]) * 4 * 4
            self.label_len = 24 // int(freq[0]) * 4
            self.pred_len = 24 // int(freq[0]) * 4
        else:
            self.seq_len, self.label_len, self.pred_len = size

        assert flag in ["pred"], "Invalid dataset type."

        self.features = features
        self.target = target
        self.scale = scale
        self.inverse = inverse
        self.time_enc = time_enc
        self.freq = freq
        self.cols = cols
        self.root_path = root_path
        self.data_path = data_path
        self.__read_data__()

    def __read_data__(self):
        self.scaler = StandardScaler()
        df_raw = pd.read_csv(os.path.join(self.root_path, self.data_path))

        if self.cols:
            cols = self.cols.copy()
            cols.remove(self.target)
        else:
            cols = list(df_raw.columns)
            self.cols = cols.copy()
            cols.remove("timestamp")
        if self.features == "S":
            cols.remove(self.target)
        border1 = len(df_raw) - self.seq_len
        border2 = len(df_raw)

        if self.features in ["M", "MS"]:
            df_raw = df_raw[["timestamp"] + cols]
            # cols_data = df_raw.columns[1:]
            # df_data = df_raw[cols_data]
            df_data = df_raw[[self.target]]
        elif self.features == "S":
            df_raw = df_raw[["timestamp", self.target]]
            df_data = df_raw[[self.target]]

        if self.scale:
            self.scaler.fit(df_data.values)
            data = self.scaler.transform(df_data.values)
        else:
            data = df_data.values

        tmp_stamp = df_raw[["timestamp"]][border1:border2]
        tmp_stamp["timestamp"] = pd.to_datetime(tmp_stamp.timestamp)
        pred_dates = pd.date_range(
            tmp_stamp.timestamp.values[-1], periods=self.pred_len + 1, freq=self.freq
        )

        df_stamp = pd.DataFrame(columns=["timestamp"])
        df_stamp.timestamp = list(tmp_stamp.timestamp.values) + list(pred_dates[1:])
        data_stamp = time_features(df_stamp, timeenc=self.time_enc, freq=self.freq[-1:])

        self.data_x = data[border1:border2]
        if self.inverse:
            self.data_y = df_data.values[border1:border2]
        else:
            self.data_y = data[border1:border2]
        self.data_stamp = data_stamp

    def __getitem__(self, index):
        s_begin = index
        s_end = s_begin + self.seq_len
        r_begin = s_end - self.label_len
        r_end = r_begin + self.label_len + self.pred_len

        seq_x = self.data_x[s_begin:s_end]
        if self.inverse:
            seq_y = self.data_x[r_begin : r_begin + self.label_len]
        else:
            seq_y = self.data_y[r_begin : r_begin + self.label_len]
        seq_x_mark = self.data_stamp[s_begin:s_end]
        seq_y_mark = self.data_stamp[r_begin:r_end]

        return seq_x, seq_y, seq_x_mark, seq_y_mark

    def __len__(self):
        return len(self.data_x) - self.seq_len + 1

    def inverse_transform(self, data):
        return self.scaler.inverse_transform(data)
